{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","categories","populateCategories","budget_function","state","target","amount_raised","json","index","results","new_category","name","spending","amount","amount_cut","push","category","Number","console","log","_this2","new_amount_cut","forEach","setState","_this3","sliders","_loop","slider","react_default","a","createElement","App_AdjustmentSlider","key","updateCategory","cat","calculate","calculateTotal","className","src","logo","alt","App_ProgressTracker","title","default_value","new","Component","AdjustmentSlider","_this4","handleChange","bind","assertThisInitialized","event","_this5","value","_this$state","type","size","onChange","React","ProgressTracker","_this6","new_value","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56a2de7b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport budget_function from './budget_function_2018.json'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n\n    // categories should not contain duplicate items\n    // however, aren't I populating this from the budget function?\n    this.categories = this.populateCategories(budget_function);\n    // this.categories = new Set();\n\n    this.state = {\n      target: 1000,\n      amount_raised: 0,\n    }\n  }\n\n  populateCategories(json) {\n    let categories = []\n\n    for (let index in json.results) {\n      let new_category = {\n        name: json.results[index].name,\n        spending: json.results[index].amount,\n        amount_cut: 0,\n      }\n      categories.push(new_category);\n    }\n    // console.log(categories)\n    return categories;\n  }\n\n  updateCategory(name, amount) {\n    for (let index in this.categories) {\n      let category = this.categories[index];\n      if (category.name === name) {\n        let new_category = {\n          name: name,\n          spending: category.spending,\n          amount_cut: Number(amount),\n        }\n        // set the category at index to the new category\n        this.categories[index] = new_category;\n\n        console.log(\"the new amount cut for\", category.name, \"is\", this.categories[index].amount_cut, \"because I was passed\", amount);\n      }\n    }\n    console.log(this.categories)\n  }\n\n  // goes through the categories and subtracts their values from the initial amount\n  // called every time a slider is adjusted\n  calculateTotal() {\n    let new_amount_cut = 0;\n\n    this.categories.forEach( (category) => {\n      new_amount_cut += category.amount_cut;\n    });\n\n    // console.log(this);\n    this.setState({ amount_raised: new_amount_cut }, () => {\n      console.log(\"I ran: \", this.state);\n    });\n  }\n\n  render() {\n\n    // TODO: move into its own function\n    let sliders = [];\n    for (let index in this.categories) {\n      let category = this.categories[index];\n      // OH!! this will always be zero because we're getting it from categories. We should be getting it from the AdjustmentSlider's form value\n      // console.log(category.amount_cut);\n      let slider = (\n        <AdjustmentSlider\n          key={category.name}\n          name={category.name}\n          spending={category.spending}\n          amount_cut={category.amount_cut}\n          // TODO rename name and cat: misleading\n          updateCategory={ (name, cat) => {\n            this.updateCategory(name, cat)\n            }}\n          calculate={() => {\n            this.calculateTotal(category.name, category.amount_cut);\n          }}\n        />\n      )\n      sliders.push(slider);\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          {sliders}\n          <ProgressTracker\n            title=\"Go To Mars\"\n            default_value={this.state.target}\n            new={this.state.amount_raised}\n          />\n        </header>\n\n      </div>\n    );\n  }\n}\n\nclass AdjustmentSlider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      key: props.name,\n      spending: props.spending,\n      amount_cut: props.amount_cut,\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    console.log(this.props)\n\n    this.props.updateCategory(this.state.key, event.target.value);\n\n    this.setState(\n      { amount_cut: event.target.value },\n      () => {\n        console.log(\"I am\", this.state.key, \"and just set my state to:\", this.state.amount_cut);\n        this.props.calculate();\n      }\n    );\n  }\n\n  render() {\n    const { key, spending, amount_cut } = this.state;\n    return (\n      <div className=\"category\">\n        <hr></hr>\n        <h3>{key}</h3>\n        <input\n          type=\"text\"\n          size=\"4\"\n          value={amount_cut}\n          onChange={this.handleChange}\n        ></input>\n        <label> cut out of {spending}</label>\n        <hr></hr>\n      </div>\n    )\n  }\n}\n\nclass ProgressTracker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: props.title,\n      default_value: props.default_value,\n      new_value: props.new,\n    }\n  }\n  render() {\n    return (\n      <div className=\"ProgressTracker\">\n        <h3>{this.state.title}</h3>\n        <p>{this.props.new} out of {this.props.default_value}</p>\n        <p>placeholder for the progress bar</p>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}