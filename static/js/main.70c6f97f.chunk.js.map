{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","toHumanNumber","require","toHumanString","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","categories","populateCategories","budget_function","state","target","amount_raised","program_name","program_target","json","index","results","new_category","name","spending","amount","amount_cut","push","category","Number","console","log","_this2","new_amount_cut","forEach","setState","_this3","sliders","_loop","slider","react_default","a","createElement","App_AdjustmentSlider","key","updateCategory","cat","calculate","calculateTotal","className","App_ProgressTracker","title","default_value","new","Component","AdjustmentSlider","_this4","handleChange","bind","assertThisInitialized","event","_this5","value","_this$state","type","size","onChange","React","ProgressTracker","_this6","new_value","min","max","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70c6f97f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport budget_function from './budget_function_2018.json'\n\nvar HRNNum = require('human-readable-numbers');\nvar toHumanNumber = HRNNum.toHumanString;\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n \n    this.categories = this.populateCategories(budget_function);\n\n    this.state = {\n      target: 1000,\n      amount_raised: 0,\n\n      // set the program we're raising money for\n      program_name: \"Go to Mars\",\n      program_target: 220000000000,\n    }\n  }\n\n  populateCategories(json) {\n    let categories = []\n\n    for (let index in json.results) {\n      let new_category = {\n        name: json.results[index].name,\n        spending: json.results[index].amount,\n        amount_cut: 0,\n      }\n      categories.push(new_category);\n    }\n    // console.log(categories)\n    return categories;\n  }\n\n  updateCategory(name, amount) {\n    for (let index in this.categories) {\n      let category = this.categories[index];\n      if (category.name === name) {\n        let new_category = {\n          name: name,\n          spending: category.spending,\n          amount_cut: Number(amount),\n        }\n        // set the category at index to the new category\n        this.categories[index] = new_category;\n\n        console.log(\"the new amount cut for\", category.name, \"is\", this.categories[index].amount_cut, \"because I was passed\", amount);\n      }\n    }\n    console.log(this.categories)\n  }\n\n  // goes through the categories and subtracts their values from the initial amount\n  // called every time a slider is adjusted\n  calculateTotal() {\n    let new_amount_cut = 0;\n\n    this.categories.forEach( (category) => {\n      new_amount_cut += category.amount_cut;\n    });\n\n    // console.log(this);\n    this.setState({ amount_raised: new_amount_cut }, () => {\n      console.log(\"I ran: \", this.state);\n    });\n  }\n\n  render() {\n    // TODO: move into its own function\n    let sliders = [];\n    for (let index in this.categories) {\n      let category = this.categories[index];\n      // OH!! this will always be zero because we're getting it from categories. We should be getting it from the AdjustmentSlider's form value\n      // console.log(category.amount_cut);\n      let slider = (\n        <AdjustmentSlider\n          key={category.name}\n          name={category.name}\n          spending={category.spending}\n          amount_cut={category.amount_cut}\n          // TODO rename name and cat: misleading\n          updateCategory={ (name, cat) => {\n            this.updateCategory(name, cat)\n            }}\n          calculate={() => {\n            this.calculateTotal(category.name, category.amount_cut);\n          }}\n        />\n      )\n      sliders.push(slider);\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"sliders\">\n            {sliders}\n          </div>\n          <ProgressTracker\n            title={this.state.program_name}\n            default_value={ this.state.program_target }\n            new={this.state.amount_raised}\n          />\n          <br></br>\n          <br></br>\n        </header>\n\n      </div>\n    );\n  }\n}\n\nclass AdjustmentSlider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      key: props.name,\n      spending: props.spending,\n      amount_cut: props.amount_cut,\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    console.log(this.props)\n\n    this.props.updateCategory(this.state.key, event.target.value);\n\n    this.setState(\n      { amount_cut: event.target.value },\n      () => {\n        console.log(\"I am\", this.state.key, \"and just set my state to:\", this.state.amount_cut);\n        this.props.calculate();\n      }\n    );\n  }\n\n  render() {\n    const { key, spending, amount_cut } = this.state;\n    return (\n      <div className=\"category\">\n        <hr></hr>\n        <h3>{key}</h3>\n        <input\n          type=\"text\"\n          size=\"4\"\n          value={amount_cut}\n          onChange={this.handleChange}\n        ></input>\n        <label> cut out of {toHumanNumber( true, spending )}</label>\n        <hr></hr>\n      </div>\n    )\n  }\n}\n\nclass ProgressTracker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: props.title,\n      default_value: props.default_value,\n      new_value: props.new,\n    }\n  }\n  render() {\n    return (\n      <div className=\"ProgressTracker\">\n        <h3>{this.state.title}</h3>\n        <p>{ toHumanNumber( true, this.props.new )}  out of { toHumanNumber( true, this.props.default_value )}</p>\n\n        <meter value={this.props.new} min=\"0\" max={this.props.default_value}></meter>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}